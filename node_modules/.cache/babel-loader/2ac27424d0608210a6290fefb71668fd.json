{"ast":null,"code":"var _jsxFileName = \"/Users/stephenrado/projects/audicards/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Deck from \"./deck/Deck\";\nimport Heading from \"./heading/Heading\";\nimport \"./App.scss\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      deck: {},\n      cardsDrawn: [],\n      sortedCards: []\n    };\n\n    this.newDeck = async () => {\n      // new deck\n      try {\n        const url = \"https://deckofcardsapi.com/api/deck/new/shuffle\";\n        const response = await axios.get(url);\n        const deck = await response.data;\n        this.setState({\n          deck,\n          cardsDrawn: []\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.updateDeck = async deckId => {\n      // update deck\n      try {\n        const url = `https://deckofcardsapi.com/api/deck/${deckId}`;\n        const response = await axios.get(url);\n        const deck = await response.data;\n        this.setState({\n          deck\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.drawCard = async () => {\n      // card from current deck\n      try {\n        //no cards left\n        if (this.state.deck.remaining === 0) {\n          alert(\"you ran out of cards\");\n        }\n\n        const url = `https://deckofcardsapi.com/api/deck/${this.state.deck.deck_id}/draw/`;\n        const resp = await axios.get(url);\n        const data = await resp.data;\n        this.setState(st => ({\n          cardsDrawn: [...st.cardsDrawn, ...data.cards]\n        }));\n        this.updateDeck(this.state.deck.deck_id);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    this.sortDeck = () => {\n      const {\n        deck\n      } = this.state.cardsDrawn;\n      let newSortedDeck = deck;\n      newSortedDeck = this.state.cardsDrawn.sort((a, b) => a.value > b.value);\n      this.setState({\n        sortedCards: newSortedDeck\n      });\n      console.log(this.state.sortedCards);\n    };\n  }\n\n  async componentDidMount() {\n    // fetch deck on load\n    this.newDeck();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"cardApp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Heading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Audi Magic card generator\"), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.drawCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Draw Random Card\"), React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.newDeck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"New Deck\"), React.createElement(\"button\", {\n      className: \"button\",\n      onClick: this.sortDeck,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Sort Deck\")), React.createElement(Deck, {\n      cards: this.state.cardsDrawn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/stephenrado/projects/audicards/src/App.js"],"names":["React","Component","axios","Deck","Heading","App","state","deck","cardsDrawn","sortedCards","newDeck","url","response","get","data","setState","err","console","error","updateDeck","deckId","drawCard","remaining","alert","deck_id","resp","st","cards","sortDeck","newSortedDeck","sort","a","b","value","log","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,YAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACzCK,KADyC,GACjC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,WAAW,EAAE;AAHP,KADiC;;AAAA,SAYzCC,OAZyC,GAY/B,YAAY;AACpB;AACA,UAAI;AACF,cAAMC,GAAG,GAAG,iDAAZ;AACA,cAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAMJ,IAAI,GAAG,MAAMK,QAAQ,CAACE,IAA5B;AACA,aAAKC,QAAL,CAAc;AACZR,UAAAA,IADY;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAAd;AAID,OARD,CAQE,OAAOQ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KAzBwC;;AAAA,SA2BzCG,UA3ByC,GA2B5B,MAAMC,MAAN,IAAgB;AAC3B;AACA,UAAI;AACF,cAAMT,GAAG,GAAI,uCAAsCS,MAAO,EAA1D;AACA,cAAMR,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAvB;AACA,cAAMJ,IAAI,GAAG,MAAMK,QAAQ,CAACE,IAA5B;AACA,aAAKC,QAAL,CAAc;AAAER,UAAAA;AAAF,SAAd;AACD,OALD,CAKE,OAAOS,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KArCwC;;AAAA,SAuCzCK,QAvCyC,GAuC9B,YAAY;AACrB;AACA,UAAI;AACF;AACA,YAAI,KAAKf,KAAL,CAAWC,IAAX,CAAgBe,SAAhB,KAA8B,CAAlC,EAAqC;AACnCC,UAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;;AACD,cAAMZ,GAAG,GAAI,uCAAsC,KAAKL,KAAL,CAAWC,IAAX,CAAgBiB,OAAQ,QAA3E;AACA,cAAMC,IAAI,GAAG,MAAMvB,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAnB;AACA,cAAMG,IAAI,GAAG,MAAMW,IAAI,CAACX,IAAxB;AACA,aAAKC,QAAL,CAAcW,EAAE,KAAK;AACnBlB,UAAAA,UAAU,EAAE,CAAC,GAAGkB,EAAE,CAAClB,UAAP,EAAmB,GAAGM,IAAI,CAACa,KAA3B;AADO,SAAL,CAAhB;AAGA,aAAKR,UAAL,CAAgB,KAAKb,KAAL,CAAWC,IAAX,CAAgBiB,OAAhC;AACD,OAZD,CAYE,OAAOR,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,KAxDwC;;AAAA,SA0DzCY,QA1DyC,GA0D9B,MAAM;AACf,YAAM;AAACrB,QAAAA;AAAD,UAAS,KAAKD,KAAL,CAAWE,UAA1B;AACA,UAAIqB,aAAa,GAAGtB,IAApB;AACAsB,MAAAA,aAAa,GAAG,KAAKvB,KAAL,CAAWE,UAAX,CAAsBsB,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAjD,CAAhB;AACA,WAAKlB,QAAL,CAAc;AACZN,QAAAA,WAAW,EAAEoB;AADD,OAAd;AAIAZ,MAAAA,OAAO,CAACiB,GAAR,CAAY,KAAK5B,KAAL,CAAWG,WAAvB;AACD,KAnEwC;AAAA;;AAOzC,QAAM0B,iBAAN,GAA0B;AACxB;AACA,SAAKzB,OAAL;AACD;;AA2DD0B,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKf,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAIE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKX,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAOE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKkB,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF,CAFF,EAaE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,KAAKtB,KAAL,CAAWE,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAiBD;;AAvFwC","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Deck from \"./deck/Deck\";\nimport Heading from \"./heading/Heading\";\nimport \"./App.scss\";\n\nexport default class App extends Component {\n  state = {\n    deck: {},\n    cardsDrawn: [],\n    sortedCards: []\n  };\n\n  async componentDidMount() {\n    // fetch deck on load\n    this.newDeck();\n  }\n\n  newDeck = async () => {\n    // new deck\n    try {\n      const url = \"https://deckofcardsapi.com/api/deck/new/shuffle\";\n      const response = await axios.get(url);\n      const deck = await response.data;\n      this.setState({\n        deck,\n        cardsDrawn: []\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  updateDeck = async deckId => {\n    // update deck\n    try {\n      const url = `https://deckofcardsapi.com/api/deck/${deckId}`;\n      const response = await axios.get(url);\n      const deck = await response.data;\n      this.setState({ deck });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  drawCard = async () => {\n    // card from current deck\n    try {\n      //no cards left\n      if (this.state.deck.remaining === 0) {\n        alert(\"you ran out of cards\");\n      }\n      const url = `https://deckofcardsapi.com/api/deck/${this.state.deck.deck_id}/draw/`;\n      const resp = await axios.get(url);\n      const data = await resp.data;\n      this.setState(st => ({\n        cardsDrawn: [...st.cardsDrawn, ...data.cards]\n      }));\n      this.updateDeck(this.state.deck.deck_id);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  sortDeck = () => {\n    const {deck} = this.state.cardsDrawn;\n    let newSortedDeck = deck;\n    newSortedDeck = this.state.cardsDrawn.sort((a, b) => a.value > b.value);\n    this.setState({\n      sortedCards: newSortedDeck\n    });\n\n    console.log(this.state.sortedCards);\n  }\n\n  render() {\n    return (\n      <div className=\"cardApp\">\n        <Heading>Audi Magic card generator</Heading>\n        <div className=\"button-container\">\n          <button className=\"button\" onClick={this.drawCard}>\n            Draw Random Card\n          </button>\n          <button className=\"button\" onClick={this.newDeck}>\n            New Deck\n          </button>\n          <button className=\"button\" onClick={this.sortDeck}>\n            Sort Deck\n          </button>\n        </div>\n        <Deck cards={this.state.cardsDrawn} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}